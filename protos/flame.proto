syntax = "proto3";

option go_package = "pkg/grpcs";

message Metadata {
  string ID = 1;
  string ownerRef = 2;
  string name = 3;
}

message Client {
  Metadata metadata = 1;
}

message Connection {
  Metadata metadata = 1;
}

enum SessionState {
  Open = 0;
  Closed = 1;
}

message SessionStatus {
  SessionState state = 1;
  int32 pending = 2;
  int32 running = 3;
  int32 succeed = 4;
  int32 failed = 5;
}

message SessionSpec {
  string serviceType = 1;
  bool  recoverable = 2;
  int32 slots = 3;
}

message Session {
    Metadata metadata = 1 ;
    SessionSpec spec = 2;
    SessionStatus status = 3;
}

enum TaskState {
	Pending = 0;
	Running = 1;
	Succeed = 2;
	Failed = 3;
}

message TaskStatus {
	TaskState state = 1;
}

message TaskSpec {
}

message Task {
    Metadata metadata = 1;
	TaskSpec spec = 2;
	TaskStatus status = 3;
}

message TaskInput {
	string taskID = 1;
	string sessionID = 2;

	string input = 3;
}

message TaskOutput {
	string taskID = 1;
	string sessionID = 2;
	string executorID = 3;

	string output = 4;
}

message ExecutorSpec {
  string type = 1;
  int32 slots = 2;
}

enum ExecutorState {
	idle = 0;
	bound = 1;
}

message ExecutorStatus {
	ExecutorState state = 1;
}

message Executor {
    Metadata metadata = 1;
    ExecutorSpec spec = 2;
    ExecutorStatus status = 3;
}

message Result {
    int32 errCode = 1;
    string message = 2;
}

message SessionList {
  repeated Session sessions = 1;
}

/*
  The frontend service of Lava, which is used to communicate with client sdk,
  e.g. create connection/session/task and so on.
 */
service Frontend {
  rpc NewConnection (Client) returns (Connection) {}
  rpc CloseConnection (Connection) returns (Result) {}

  rpc NewSession (Connection) returns (Session) {}
  rpc CloseSession (Session) returns (Result) {}
  rpc ListSession (Client) returns (SessionList) {}

  rpc SendInput (TaskInput) returns (Task) {}
  rpc RecvOutput (Task) returns (TaskOutput) {}

  rpc Run(stream TaskInput) returns (stream TaskOutput) {}
}

/*
  The backend service of Lava, which is used to communicate with service sdk,
  e.g. register executor, invoke tasks and so on.
 */
service Backend {
  rpc Register (Executor) returns (Executor) {}
  rpc Unregister (Executor) returns (Result) {}

  rpc Bind (Executor) returns (Session) {}
  rpc Unbind (Executor) returns (Result) {}

  rpc GetTask (Executor) returns (stream TaskInput) {}
  rpc CompleteTask (TaskOutput) returns (Result) {}
}

