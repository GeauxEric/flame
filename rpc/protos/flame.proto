syntax = "proto3";

package flame;

message Metadata {
  string id = 1;
  optional string owner = 2;
}

enum SessionState {
  SessionOpen = 0;
  SessionClosed = 1;
}

message SessionStatus {
  SessionState state = 1;

  int64 creation_time = 2;
  optional int64 completion_time = 3;

  int32 pending = 4;
  int32 running = 5;
  int32 succeed = 6;
  int32 failed = 7;
}

message SessionSpec {
  string application = 1;
  int32 slots = 2;
}

message Session {
  Metadata metadata = 1 ;
  SessionSpec spec = 2;
  SessionStatus status = 3;
}

enum TaskState {
  TaskPending = 0;
  TaskRunning = 1;
  TaskSucceed = 2;
  TaskFailed = 3;
}

message TaskStatus {
  TaskState state = 1;

  int64 creation_time = 2;
  optional int64 completion_time = 3;
}

message TaskSpec {
  string session_id = 2;

  optional bytes input = 3;
  optional bytes output = 4;
}

message Task {
  Metadata metadata = 1;
  TaskSpec spec = 2;
  TaskStatus status = 3;
}

enum Shim {
  LogShim = 0;
  StdioShim = 1;
  RpcShim = 2;
  RestShim = 3;
}

message Application {
  string name = 1;
  Shim shim = 2;
  string command = 3;
  repeated string arguments = 4;
  repeated string environments = 5;
  string working_directory = 6;
}

message ExecutorSpec {
  int32 slots = 1;
  repeated Application applications = 2;
}

enum ExecutorState {
  ExecutorIdle = 0;
  ExecutorBound = 1;
  ExecutorRunning = 2;
  ExecutorUnknown = 3;
}

message ExecutorStatus {
  ExecutorState state = 1;
}

message Executor {
  Metadata metadata = 1;
  ExecutorSpec spec = 2;
  ExecutorStatus status = 3;
}

message Result {
  int32 return_code = 1;
  optional string message = 2;
}

message SessionList {
  repeated Session sessions = 1;
}

/*
  The frontend service of Flame, which is used to communicate with client sdk,
  e.g. create connection/session/task and so on.
 */
service Frontend {
  rpc CreateSession (CreateSessionRequest) returns (Session) {}
  rpc DeleteSession (DeleteSessionRequest) returns (Result) {}

  rpc OpenSession (OpenSessionRequest) returns (Result) {}
  rpc CloseSession (CloseSessionRequest) returns (Result) {}

  rpc GetSession(GetSessionRequest) returns (Session) {}
  rpc ListSession (ListSessionRequest) returns (SessionList) {}

  rpc CreateTask (CreateTaskRequest) returns (Task) {}
  rpc DeleteTask (DeleteTaskRequest) returns (Result) {}

  rpc GetTask (GetTaskRequest) returns (Task) {}
  rpc WatchTask (WatchTaskRequest) returns (stream Task) {}
}

message CreateSessionRequest {
  SessionSpec session = 1;
}

message DeleteSessionRequest {
  string session_id = 1;
}

message OpenSessionRequest {
  string session_id = 1;
}

message CloseSessionRequest {
  string session_id = 1;
}
message GetSessionRequest {
  string session_id = 1;
}

message ListSessionRequest {

}

message CreateTaskRequest {
  TaskSpec task = 1;
}

message DeleteTaskRequest {
  string task_id = 1;
  string session_id = 2;
}

message GetTaskRequest {
  string task_id = 1;
  string session_id = 2;
}

message WatchTaskRequest {
  string task_id = 1;
  string session_id = 2;
}

/*
  The backend service of Lava, which is used to communicate with service sdk,
  e.g. register executor, invoke tasks and so on.
 */
service Backend {
  rpc RegisterExecutor (RegisterExecutorRequest) returns (Result) {}
  rpc UnregisterExecutor (UnregisterExecutorRequest) returns (Result) {}

  rpc BindExecutor (BindExecutorRequest) returns (Session) {}
  rpc BindExecutorCompleted (BindExecutorCompletedRequest) returns (Result) {}

  rpc UnbindExecutor (UnbindExecutorRequest) returns (Result) {}
  rpc UnbindExecutorCompleted (UnbindExecutorCompletedRequest) returns (Result) {}

  rpc LaunchTask (LaunchTaskRequest) returns (LaunchTaskResponse) {}
  rpc CompleteTask(CompleteTaskRequest) returns (Result) {}
}

message RegisterExecutorRequest {
  string executor_id = 1;
  ExecutorSpec executor_spec = 2;
}

message UnregisterExecutorRequest {
  string executor_id = 1;
}

message BindExecutorRequest {
  string executor_id = 1;
}

message BindExecutorCompletedRequest {
  string executor_id = 1;
}

message UnbindExecutorRequest {
  string executor_id = 1;
}

message UnbindExecutorCompletedRequest {
  string executor_id = 1;
}

message LaunchTaskRequest {
  string executor_id = 1;
}

message LaunchTaskResponse {
  // If no more task in the session, the result is empty.
  optional Task task = 1;
}

message CompleteTaskRequest {
  string executor_id = 1;
  optional bytes task_output = 2;
}